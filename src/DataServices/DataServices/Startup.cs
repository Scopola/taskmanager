/*
 * SDRA API
 *
 * This API is for SDRA  It provides Source Document Assessment Data and Data Access 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.IO;
using DataServices.Adapters;
using DataServices.Config;
using DataServices.Filters;
using DataServices.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;
using Swashbuckle.AspNetCore.Swagger;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace DataServices
{
    /// <summary>
    /// Startup
    /// </summary>
    public class Startup
    {
        private readonly IHostingEnvironment _hostingEnv;

        private IConfiguration Configuration { get; }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="env"></param>
        /// <param name="configuration"></param>
        public Startup(IHostingEnvironment env, IConfiguration configuration)
        {
            _hostingEnv = env;
            Configuration = configuration;
        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        /// <param name="services"></param>
        public void ConfigureServices(IServiceCollection services)
        {
            // Add framework services.
            services
                .AddMvc()
                .AddJsonOptions(opts =>
                {
                    opts.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
                    opts.SerializerSettings.Converters.Add(new StringEnumConverter
                    {
                        CamelCaseText = true
                    });
                })
                .AddXmlSerializerFormatters();

            services.AddOptions<Settings>().Bind(Configuration.GetSection("urls"));

            var startupSecrets = new StartupSecretsConfig();
            Configuration.GetSection("SdraDbSection").Bind(startupSecrets);

            var connection = Common.Helpers.DatabasesHelpers.BuildOracleConnectionString(startupSecrets.DataSource,
                startupSecrets.UserId, startupSecrets.Password);

            services.AddDbContext<SdraDbContext>((serviceProvider, options) =>
                options.UseOracle(connection));

            services
                .AddSwaggerGen(c =>
                {
                    c.SwaggerDoc("1.0.0", new Info
                    {
                        Version = "1.0.0",
                        Title = "SDRA API",
                        Description = "SDRA API (ASP.NET Core 2.2)",
                        Contact = new Contact()
                        {
                            Name = "Swagger Codegen Contributors",
                            Url = "https://github.com/swagger-api/swagger-codegen",
                            Email = ""
                        },
                        TermsOfService = ""
                    });
                    c.CustomSchemaIds(type => type.FriendlyId(true));
                    c.DescribeAllEnumsAsStrings();
                    c.IncludeXmlComments(Path.Combine(Directory.GetCurrentDirectory(), "DataServices.xml"));
                    // Sets the basePath property in the Swagger document generated
                    c.DocumentFilter<BasePathFilter>("/DataServices/v1/");

                    // Include DataAnnotation attributes on Controller Action parameters as Swagger validation rules (e.g required, pattern, ..)
                    // Use [ValidateModelState] on Actions to actually validate it in C# as well!
                    c.OperationFilter<GeneratePathParamsValidationFilter>();
                });

            services.AddScoped<IAssessmentWebServiceSoapClientAdapter, AssessmentWebServiceSoapClientAdapter>();
            services.AddScoped<IDataAccessWebServiceSoapClientAdapter, DataAccessWebServiceSoapClientAdapter>();
        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        /// </summary>
        /// <param name="app"></param>
        /// <param name="env"></param>
        /// <param name="loggerFactory"></param>
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            app
                .UseMvc()
                .UseDefaultFiles()
                .UseStaticFiles()
                .UseSwagger()
                .UseSwaggerUI(c =>
                {
                    c.SwaggerEndpoint("/swagger-original.json", "SDRA API Original");
                });

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                //TODO: Enable production exception handling (https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling)
                // app.UseExceptionHandler("/Home/Error");
            }
        }
    }
}
