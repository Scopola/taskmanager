/*
 * SDRA API
 *
 * This API is for SDRA  It provides Source Document Assessment Data and Data Access 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;

namespace DataServices.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LinkedDocument : IEquatable<LinkedDocument>
    { 
        /// <summary>
        /// The sdocId of the forward linked document or the source document sdocId
        /// </summary>
        /// <value>The sdocId of the forward linked document or the source document sdocId</value>
        [DataMember(Name="docId1")]
        public int DocId1 { get; set; }

        /// <summary>
        /// The sdocId of the backward linked document or the source document sdocId
        /// </summary>
        /// <value>The sdocId of the backward linked document or the source document sdocId</value>
        [DataMember(Name="docId2")]
        public int DocId2 { get; set; }

        /// <summary>
        /// Gets or Sets LinkType
        /// </summary>
        [DataMember(Name="linkType")]
        public string LinkType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinkedDocument {\n");
            sb.Append("  DocId1: ").Append(DocId1).Append("\n");
            sb.Append("  DocId2: ").Append(DocId2).Append("\n");
            sb.Append("  LinkType: ").Append(LinkType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LinkedDocument)obj);
        }

        /// <summary>
        /// Returns true if LinkedDocument instances are equal
        /// </summary>
        /// <param name="other">Instance of LinkedDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkedDocument other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DocId1 == other.DocId1
                ) && 
                (
                    DocId2 == other.DocId2
                ) && 
                (
                    LinkType == other.LinkType ||
                    LinkType != null &&
                    LinkType.Equals(other.LinkType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                hashCode = hashCode * 59 + DocId1.GetHashCode();
                hashCode = hashCode * 59 + DocId2.GetHashCode();
                if (LinkType != null)
                    hashCode = hashCode * 59 + LinkType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LinkedDocument left, LinkedDocument right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LinkedDocument left, LinkedDocument right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
