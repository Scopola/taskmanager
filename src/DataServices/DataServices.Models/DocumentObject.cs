/*
 * SDRA API
 *
 * This API is for SDRA  It provides Source Document Assessment Data and Data Access 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace DataServices.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DocumentObject : IEquatable<DocumentObject>
    { 
        /// <summary>
        /// The unique identifier for the SDRA assessment doucument i.e. the sdoc_id
        /// </summary>
        /// <value>The unique identifier for the SDRA assessment doucument i.e. the sdoc_id</value>
        [Required]
        [DataMember(Name="id")]
        public int Id { get; set; }

        /// <summary>
        /// The name of the SDRA document
        /// </summary>
        /// <value>The name of the SDRA document</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The unqiue TRIM identifier for the document i.e. the RSDRA number
        /// </summary>
        /// <value>The unqiue TRIM identifier for the document i.e. the RSDRA number</value>
        [DataMember(Name="sourceName")]
        public string SourceName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SourceName: ").Append(SourceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DocumentObject)obj);
        }

        /// <summary>
        /// Returns true if DocumentObject instances are equal
        /// </summary>
        /// <param name="other">Instance of DocumentObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentObject other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    SourceName == other.SourceName ||
                    SourceName != null &&
                    SourceName.Equals(other.SourceName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (SourceName != null)
                    hashCode = hashCode * 59 + SourceName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DocumentObject left, DocumentObject right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DocumentObject left, DocumentObject right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
