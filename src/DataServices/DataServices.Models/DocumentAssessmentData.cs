/*
 * SDRA API
 *
 * This API is for SDRA  It provides Source Document Assessment Data and Data Access 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace DataServices.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DocumentAssessmentData : IEquatable<DocumentAssessmentData>
    { 
        /// <summary>
        /// Gets or Sets SdocId
        /// </summary>
        [Required]
        [DataMember(Name="sdocId")]
        public SdocId SdocId { get; set; }

        /// <summary>
        /// SOURCE_DOCUMENT_NAME
        /// </summary>
        /// <value>SOURCE_DOCUMENT_NAME</value>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// name of source
        /// </summary>
        /// <value>name of source</value>
        [Required]
        [DataMember(Name="sourceName")]
        public string SourceName { get; set; }

        /// <summary>
        /// RECEIPT_DATE
        /// </summary>
        /// <value>RECEIPT_DATE</value>
        [Required]
        [DataMember(Name="receiptDate")]
        public DateTime? ReceiptDate { get; set; }

        /// <summary>
        /// TO_SDO_DATE
        /// </summary>
        /// <value>TO_SDO_DATE</value>
        [Required]
        [DataMember(Name="SDODate")]
        public DateTime? SDODate { get; set; }

        /// <summary>
        /// The Effective start date, based on either the Receipt Date or To_SDO_Date
        /// </summary>
        /// <value>The Effective start date, based on either the Receipt Date or To_SDO_Date</value>
        [Required]
        [DataMember(Name="effectiveStartDate")]
        public DateTime? EffectiveStartDate { get; set; }

        /// <summary>
        /// Notes about the source document assessment.
        /// </summary>
        /// <value>Notes about the source document assessment.</value>
        [Required]
        [DataMember(Name="notes")]
        public string Notes { get; set; }

        /// <summary>
        /// The team to which the source document assessment has been assigned
        /// </summary>
        /// <value>The team to which the source document assessment has been assigned</value>
        [Required]
        [DataMember(Name="team")]
        public string Team { get; set; }

        /// <summary>
        /// The type of source document from SDRA SOURCE_DOCUMENT_TYPE
        /// </summary>
        /// <value>The type of source document from SDRA SOURCE_DOCUMENT_TYPE</value>
        [Required]
        [DataMember(Name="documentType")]
        public string DocumentType { get; set; }

        /// <summary>
        /// SOURCE_NATURE
        /// </summary>
        /// <value>SOURCE_NATURE</value>
        [DataMember(Name="documentNature:")]
        public string DocumentNature { get; set; }

        /// <summary>
        /// Datum
        /// </summary>
        /// <value>Datum</value>
        [Required]
        [DataMember(Name="datum")]
        public string Datum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentAssessmentData {\n");
            sb.Append("  SdocId: ").Append(SdocId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SourceName: ").Append(SourceName).Append("\n");
            sb.Append("  ReceiptDate: ").Append(ReceiptDate).Append("\n");
            sb.Append("  SDODate: ").Append(SDODate).Append("\n");
            sb.Append("  EffectiveStartDate: ").Append(EffectiveStartDate).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  DocumentNature: ").Append(DocumentNature).Append("\n");
            sb.Append("  Datum: ").Append(Datum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DocumentAssessmentData)obj);
        }

        /// <summary>
        /// Returns true if DocumentAssessmentData instances are equal
        /// </summary>
        /// <param name="other">Instance of DocumentAssessmentData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentAssessmentData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SdocId == other.SdocId ||
                    SdocId != null &&
                    SdocId.Equals(other.SdocId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    SourceName == other.SourceName ||
                    SourceName != null &&
                    SourceName.Equals(other.SourceName)
                ) && 
                (
                    ReceiptDate == other.ReceiptDate ||
                    ReceiptDate != null &&
                    ReceiptDate.Equals(other.ReceiptDate)
                ) && 
                (
                    SDODate == other.SDODate ||
                    SDODate != null &&
                    SDODate.Equals(other.SDODate)
                ) && 
                (
                    EffectiveStartDate == other.EffectiveStartDate ||
                    EffectiveStartDate != null &&
                    EffectiveStartDate.Equals(other.EffectiveStartDate)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                ) && 
                (
                    Team == other.Team ||
                    Team != null &&
                    Team.Equals(other.Team)
                ) && 
                (
                    DocumentType == other.DocumentType ||
                    DocumentType != null &&
                    DocumentType.Equals(other.DocumentType)
                ) && 
                (
                    DocumentNature == other.DocumentNature ||
                    DocumentNature != null &&
                    DocumentNature.Equals(other.DocumentNature)
                ) && 
                (
                    Datum == other.Datum ||
                    Datum != null &&
                    Datum.Equals(other.Datum)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SdocId != null)
                    hashCode = hashCode * 59 + SdocId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (SourceName != null)
                    hashCode = hashCode * 59 + SourceName.GetHashCode();
                    if (ReceiptDate != null)
                    hashCode = hashCode * 59 + ReceiptDate.GetHashCode();
                    if (SDODate != null)
                    hashCode = hashCode * 59 + SDODate.GetHashCode();
                    if (EffectiveStartDate != null)
                    hashCode = hashCode * 59 + EffectiveStartDate.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    if (Team != null)
                    hashCode = hashCode * 59 + Team.GetHashCode();
                    if (DocumentType != null)
                    hashCode = hashCode * 59 + DocumentType.GetHashCode();
                    if (DocumentNature != null)
                    hashCode = hashCode * 59 + DocumentNature.GetHashCode();
                    if (Datum != null)
                    hashCode = hashCode * 59 + Datum.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DocumentAssessmentData left, DocumentAssessmentData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DocumentAssessmentData left, DocumentAssessmentData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
