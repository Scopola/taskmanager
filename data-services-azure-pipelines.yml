# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'windows-2019'

steps:

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(Build.SourcesDirectory)\\taskmanager\\dataservices\\dataservices.csproj'
    feedsToUse: 'select'
  displayName: 'dotnet restore dataservices'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(Build.SourcesDirectory)\\taskmanager\\dataservices\\dataservices.csproj'
  displayName: 'dotnet build dataservices'

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(Build.SourcesDirectory)\\taskmanager\\dataservicestests\\dataservicestests.csproj'
    feedsToUse: 'select'
  displayName: 'dotnet restore dataservicestests'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(Build.SourcesDirectory)\\taskmanager\\dataservicestests\\dataservicestests.csproj'
  displayName: 'dotnet build dataservicestests'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)\\taskmanager\\dataservicestests\\dataservicestests.csproj'
  displayName: 'dotnet test dataservicestests'

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '$(Build.SourcesDirectory)\\taskmanager\\dataservices\\dataservices.csproj'
    zipAfterPublish: false
    arguments: '--output $(Build.ArtifactStagingDirectory)\\dataservices'
  displayName: 'Publish Solution'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\\dataservices'
    ArtifactName: 'dataservices'
    publishLocation: 'Container'
  displayName: 'Publish dataservices Artifact'

